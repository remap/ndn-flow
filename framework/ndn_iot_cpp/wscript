#!/usr/bin/env python
 
APPNAME = 'NDN_IOT_CPP'
VERSION = '0.1'
 
from waflib import Build, Logs, Utils, Task, TaskGen, Configure, Context

def options(opt):
    opt.load('compiler_c compiler_cxx')
    opt.load('boost protoc', tooldir = ['waf-tools'])
    
def configure(conf):
    conf.load("compiler_c compiler_cxx")
    conf.add_supported_cxxflags (cxxflags = ['-O3', 
                                             '-std=c++11',
                                             '-std=c++0x',
                                             '-g'])

    conf.check_cfg(package = 'sqlite3', args = ['--cflags', '--libs'], uselib_store = 'SQLITE3', mandatory = True)
    # TODO: customizable lib paths
    conf.check(features = 'cxx cxxprogram', lib = ['ndn-cpp'], libpath = ['/usr/local/lib'], cflags = ['-Wall'], uselib_store = 'NDNCPP', mandatory = True)
    conf.env.append_value('INCLUDES', ['/usr/local/include'])
    
    conf.load('protoc')
    # dependency of threadsafe face, boost asio (libraries system and thread)
    conf.load('boost')
    conf.check_boost(lib='system thread')

    conf.write_config_header('config.h')



def build (ctx):
    version(ctx)
    # Generate protobuf file, being debugged
    # ctx( 
    #     rule = "protoc --cpp_out=. --proto_path=src/commands ${SRC}", 
    #     source = "src/commands/app-request.proto", 
    
    #     install_path = None
    # )

    # Build the library
    libndn_iot = dict(
        target = "ndn_iot_cpp",
        name = "ndn_iot_cpp",
        
        source = ctx.path.ant_glob(['src/**/*.cpp', 'src/**/*.cc']),
        use = 'BOOST NDNCPP PROTOBUF',
        includes = '. src include src/commands',
        export_includes = "src",
        install_path = '${LIBDIR}',
    )
    ctx(
        features = ["cxx", "cxxshlib"],
        VNUM = VERSION_BASE,
        CNUM = VERSION_BASE,
        **libndn_iot
    )

    # Build the test    
    # TODO: for now need to make install and export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
    for i in ctx.path.ant_glob(['examples/*.cpp']):
        name = str(i)[:-len(".cpp")]
        ctx(
            features = ["cxx", "cxxprogram"],
            target = name,
            source = [i],
            use = 'ndn_iot_cpp BOOST NDNCPP',
            includes = 'include',
            install_path = None
        )

    # Copy the configuration file
    ctx( 
        rule = "cp ${SRC} ${TGT}", 
        source = "producer.conf.sample", 
        target = "app.conf",
        install_path = None
    )

@Configure.conf
def add_supported_cxxflags(self, cxxflags):
    """
    Check which cxxflags are supported by compiler and add them to env.CXXFLAGS variable
    """
    self.start_msg('Checking allowed flags for c++ compiler')

    supportedFlags = []
    for flag in cxxflags:
        if self.check_cxx (cxxflags=[flag], mandatory=False):
            supportedFlags += [flag]

    self.end_msg (' '.join (supportedFlags))
    self.env.CXXFLAGS += supportedFlags

def version(ctx):
    if getattr(Context.g_module, 'VERSION_BASE', None):
        return

    Context.g_module.VERSION_BASE = Context.g_module.VERSION
